// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.0
// source: simple_merchant.proto

package simple_merchant

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SimpleMerchant_DeleteUserById_FullMethodName               = "/simple_merchant.SimpleMerchant/DeleteUserById"
	SimpleMerchant_CreateProduct_FullMethodName                = "/simple_merchant.SimpleMerchant/CreateProduct"
	SimpleMerchant_DeleteProductById_FullMethodName            = "/simple_merchant.SimpleMerchant/DeleteProductById"
	SimpleMerchant_CreateUser_FullMethodName                   = "/simple_merchant.SimpleMerchant/CreateUser"
	SimpleMerchant_GetUserEmailVerificationCode_FullMethodName = "/simple_merchant.SimpleMerchant/GetUserEmailVerificationCode"
	SimpleMerchant_VerifyUserEmail_FullMethodName              = "/simple_merchant.SimpleMerchant/VerifyUserEmail"
	SimpleMerchant_LoginUser_FullMethodName                    = "/simple_merchant.SimpleMerchant/LoginUser"
	SimpleMerchant_LogoutUser_FullMethodName                   = "/simple_merchant.SimpleMerchant/LogoutUser"
	SimpleMerchant_ListTheRecommendedProducts_FullMethodName   = "/simple_merchant.SimpleMerchant/ListTheRecommendedProducts"
)

// SimpleMerchantClient is the client API for SimpleMerchant service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SimpleMerchantClient interface {
	DeleteUserById(ctx context.Context, in *DeleteUserByIdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*CreateProductResponse, error)
	DeleteProductById(ctx context.Context, in *DeleteProductByIdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	GetUserEmailVerificationCode(ctx context.Context, in *GetUserEmailVerificationCodeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	VerifyUserEmail(ctx context.Context, in *VerifyUserEmailRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResponse, error)
	LogoutUser(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListTheRecommendedProducts(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListTheRecommendedProductsResponse, error)
}

type simpleMerchantClient struct {
	cc grpc.ClientConnInterface
}

func NewSimpleMerchantClient(cc grpc.ClientConnInterface) SimpleMerchantClient {
	return &simpleMerchantClient{cc}
}

func (c *simpleMerchantClient) DeleteUserById(ctx context.Context, in *DeleteUserByIdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SimpleMerchant_DeleteUserById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleMerchantClient) CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*CreateProductResponse, error) {
	out := new(CreateProductResponse)
	err := c.cc.Invoke(ctx, SimpleMerchant_CreateProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleMerchantClient) DeleteProductById(ctx context.Context, in *DeleteProductByIdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SimpleMerchant_DeleteProductById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleMerchantClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, SimpleMerchant_CreateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleMerchantClient) GetUserEmailVerificationCode(ctx context.Context, in *GetUserEmailVerificationCodeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SimpleMerchant_GetUserEmailVerificationCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleMerchantClient) VerifyUserEmail(ctx context.Context, in *VerifyUserEmailRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SimpleMerchant_VerifyUserEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleMerchantClient) LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResponse, error) {
	out := new(LoginUserResponse)
	err := c.cc.Invoke(ctx, SimpleMerchant_LoginUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleMerchantClient) LogoutUser(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SimpleMerchant_LogoutUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleMerchantClient) ListTheRecommendedProducts(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListTheRecommendedProductsResponse, error) {
	out := new(ListTheRecommendedProductsResponse)
	err := c.cc.Invoke(ctx, SimpleMerchant_ListTheRecommendedProducts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SimpleMerchantServer is the server API for SimpleMerchant service.
// All implementations must embed UnimplementedSimpleMerchantServer
// for forward compatibility
type SimpleMerchantServer interface {
	DeleteUserById(context.Context, *DeleteUserByIdRequest) (*emptypb.Empty, error)
	CreateProduct(context.Context, *CreateProductRequest) (*CreateProductResponse, error)
	DeleteProductById(context.Context, *DeleteProductByIdRequest) (*emptypb.Empty, error)
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	GetUserEmailVerificationCode(context.Context, *GetUserEmailVerificationCodeRequest) (*emptypb.Empty, error)
	VerifyUserEmail(context.Context, *VerifyUserEmailRequest) (*emptypb.Empty, error)
	LoginUser(context.Context, *LoginUserRequest) (*LoginUserResponse, error)
	LogoutUser(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	ListTheRecommendedProducts(context.Context, *emptypb.Empty) (*ListTheRecommendedProductsResponse, error)
	mustEmbedUnimplementedSimpleMerchantServer()
}

// UnimplementedSimpleMerchantServer must be embedded to have forward compatible implementations.
type UnimplementedSimpleMerchantServer struct {
}

func (UnimplementedSimpleMerchantServer) DeleteUserById(context.Context, *DeleteUserByIdRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserById not implemented")
}
func (UnimplementedSimpleMerchantServer) CreateProduct(context.Context, *CreateProductRequest) (*CreateProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProduct not implemented")
}
func (UnimplementedSimpleMerchantServer) DeleteProductById(context.Context, *DeleteProductByIdRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProductById not implemented")
}
func (UnimplementedSimpleMerchantServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedSimpleMerchantServer) GetUserEmailVerificationCode(context.Context, *GetUserEmailVerificationCodeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserEmailVerificationCode not implemented")
}
func (UnimplementedSimpleMerchantServer) VerifyUserEmail(context.Context, *VerifyUserEmailRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyUserEmail not implemented")
}
func (UnimplementedSimpleMerchantServer) LoginUser(context.Context, *LoginUserRequest) (*LoginUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUser not implemented")
}
func (UnimplementedSimpleMerchantServer) LogoutUser(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogoutUser not implemented")
}
func (UnimplementedSimpleMerchantServer) ListTheRecommendedProducts(context.Context, *emptypb.Empty) (*ListTheRecommendedProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTheRecommendedProducts not implemented")
}
func (UnimplementedSimpleMerchantServer) mustEmbedUnimplementedSimpleMerchantServer() {}

// UnsafeSimpleMerchantServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SimpleMerchantServer will
// result in compilation errors.
type UnsafeSimpleMerchantServer interface {
	mustEmbedUnimplementedSimpleMerchantServer()
}

func RegisterSimpleMerchantServer(s grpc.ServiceRegistrar, srv SimpleMerchantServer) {
	s.RegisterService(&SimpleMerchant_ServiceDesc, srv)
}

func _SimpleMerchant_DeleteUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleMerchantServer).DeleteUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SimpleMerchant_DeleteUserById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleMerchantServer).DeleteUserById(ctx, req.(*DeleteUserByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimpleMerchant_CreateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleMerchantServer).CreateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SimpleMerchant_CreateProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleMerchantServer).CreateProduct(ctx, req.(*CreateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimpleMerchant_DeleteProductById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleMerchantServer).DeleteProductById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SimpleMerchant_DeleteProductById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleMerchantServer).DeleteProductById(ctx, req.(*DeleteProductByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimpleMerchant_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleMerchantServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SimpleMerchant_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleMerchantServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimpleMerchant_GetUserEmailVerificationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserEmailVerificationCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleMerchantServer).GetUserEmailVerificationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SimpleMerchant_GetUserEmailVerificationCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleMerchantServer).GetUserEmailVerificationCode(ctx, req.(*GetUserEmailVerificationCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimpleMerchant_VerifyUserEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyUserEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleMerchantServer).VerifyUserEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SimpleMerchant_VerifyUserEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleMerchantServer).VerifyUserEmail(ctx, req.(*VerifyUserEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimpleMerchant_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleMerchantServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SimpleMerchant_LoginUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleMerchantServer).LoginUser(ctx, req.(*LoginUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimpleMerchant_LogoutUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleMerchantServer).LogoutUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SimpleMerchant_LogoutUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleMerchantServer).LogoutUser(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimpleMerchant_ListTheRecommendedProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleMerchantServer).ListTheRecommendedProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SimpleMerchant_ListTheRecommendedProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleMerchantServer).ListTheRecommendedProducts(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// SimpleMerchant_ServiceDesc is the grpc.ServiceDesc for SimpleMerchant service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SimpleMerchant_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "simple_merchant.SimpleMerchant",
	HandlerType: (*SimpleMerchantServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteUserById",
			Handler:    _SimpleMerchant_DeleteUserById_Handler,
		},
		{
			MethodName: "CreateProduct",
			Handler:    _SimpleMerchant_CreateProduct_Handler,
		},
		{
			MethodName: "DeleteProductById",
			Handler:    _SimpleMerchant_DeleteProductById_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _SimpleMerchant_CreateUser_Handler,
		},
		{
			MethodName: "GetUserEmailVerificationCode",
			Handler:    _SimpleMerchant_GetUserEmailVerificationCode_Handler,
		},
		{
			MethodName: "VerifyUserEmail",
			Handler:    _SimpleMerchant_VerifyUserEmail_Handler,
		},
		{
			MethodName: "LoginUser",
			Handler:    _SimpleMerchant_LoginUser_Handler,
		},
		{
			MethodName: "LogoutUser",
			Handler:    _SimpleMerchant_LogoutUser_Handler,
		},
		{
			MethodName: "ListTheRecommendedProducts",
			Handler:    _SimpleMerchant_ListTheRecommendedProducts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "simple_merchant.proto",
}
