// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: user_emai_verification_codes.sql

package sqlc

import (
	"context"
	"time"
)

const createUserEmailVerificationCode = `-- name: CreateUserEmailVerificationCode :exec
INSERT INTO user_email_verification_codes (
    user_id,
    email,
    verification_code,
    max_try,
    expired_at 
) VALUES (
    ?,
    ?,
    ?,
    ?,
    ?
)
`

type CreateUserEmailVerificationCodeParams struct {
	UserID           uint32    `json:"user_id"`
	Email            string    `json:"email"`
	VerificationCode string    `json:"verification_code"`
	MaxTry           uint32    `json:"max_try"`
	ExpiredAt        time.Time `json:"expired_at"`
}

func (q *Queries) CreateUserEmailVerificationCode(ctx context.Context, arg CreateUserEmailVerificationCodeParams) error {
	_, err := q.exec(ctx, q.createUserEmailVerificationCodeStmt, createUserEmailVerificationCode,
		arg.UserID,
		arg.Email,
		arg.VerificationCode,
		arg.MaxTry,
		arg.ExpiredAt,
	)
	return err
}

const decreaseUserEmailVerificationCodeMaxTryById = `-- name: DecreaseUserEmailVerificationCodeMaxTryById :exec
UPDATE
    user_email_verification_codes
SET
    max_try = max_try - 1
WHERE
    id = ?
`

func (q *Queries) DecreaseUserEmailVerificationCodeMaxTryById(ctx context.Context, id uint32) error {
	_, err := q.exec(ctx, q.decreaseUserEmailVerificationCodeMaxTryByIdStmt, decreaseUserEmailVerificationCodeMaxTryById, id)
	return err
}

const deleteUserEmailVerificationCodeByUserId = `-- name: DeleteUserEmailVerificationCodeByUserId :exec
DELETE FROM
    user_email_verification_codes
WHERE
    user_id = ?
`

func (q *Queries) DeleteUserEmailVerificationCodeByUserId(ctx context.Context, userID uint32) error {
	_, err := q.exec(ctx, q.deleteUserEmailVerificationCodeByUserIdStmt, deleteUserEmailVerificationCodeByUserId, userID)
	return err
}

const getLastCreatedUserEmailVerificationCodeByUserId = `-- name: GetLastCreatedUserEmailVerificationCodeByUserId :one
SELECT
    id, created_at, updated_at, user_id, email, verification_code, max_try, expired_at
FROM
    user_email_verification_codes
WHERE
    1 = 1
    AND user_id = ? 
ORDER BY
    created_at DESC
LIMIT
    1
`

func (q *Queries) GetLastCreatedUserEmailVerificationCodeByUserId(ctx context.Context, userID uint32) (UserEmailVerificationCode, error) {
	row := q.queryRow(ctx, q.getLastCreatedUserEmailVerificationCodeByUserIdStmt, getLastCreatedUserEmailVerificationCodeByUserId, userID)
	var i UserEmailVerificationCode
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.Email,
		&i.VerificationCode,
		&i.MaxTry,
		&i.ExpiredAt,
	)
	return i, err
}

const getUserEmailVerificationCodeByEmailAndVerificationCode = `-- name: GetUserEmailVerificationCodeByEmailAndVerificationCode :one
SELECT
    id, created_at, updated_at, user_id, email, verification_code, max_try, expired_at
FROM
    user_email_verification_codes
WHERE
    1 = 1
    AND email = ?
    AND verification_code = ?
`

type GetUserEmailVerificationCodeByEmailAndVerificationCodeParams struct {
	Email            string `json:"email"`
	VerificationCode string `json:"verification_code"`
}

func (q *Queries) GetUserEmailVerificationCodeByEmailAndVerificationCode(ctx context.Context, arg GetUserEmailVerificationCodeByEmailAndVerificationCodeParams) (UserEmailVerificationCode, error) {
	row := q.queryRow(ctx, q.getUserEmailVerificationCodeByEmailAndVerificationCodeStmt, getUserEmailVerificationCodeByEmailAndVerificationCode, arg.Email, arg.VerificationCode)
	var i UserEmailVerificationCode
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.Email,
		&i.VerificationCode,
		&i.MaxTry,
		&i.ExpiredAt,
	)
	return i, err
}
