// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0

package sqlc

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createProductStmt, err = db.PrepareContext(ctx, createProduct); err != nil {
		return nil, fmt.Errorf("error preparing query CreateProduct: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.createUserAuthOnDuplicateUpdateTokenAndExpiredAtStmt, err = db.PrepareContext(ctx, createUserAuthOnDuplicateUpdateTokenAndExpiredAt); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUserAuthOnDuplicateUpdateTokenAndExpiredAt: %w", err)
	}
	if q.createUserEmailVerificationCodeStmt, err = db.PrepareContext(ctx, createUserEmailVerificationCode); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUserEmailVerificationCode: %w", err)
	}
	if q.decreaseUserEmailVerificationCodeMaxTryByIdStmt, err = db.PrepareContext(ctx, decreaseUserEmailVerificationCodeMaxTryById); err != nil {
		return nil, fmt.Errorf("error preparing query DecreaseUserEmailVerificationCodeMaxTryById: %w", err)
	}
	if q.deleteUserAuthByUserIdStmt, err = db.PrepareContext(ctx, deleteUserAuthByUserId); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUserAuthByUserId: %w", err)
	}
	if q.deleteUserByIdStmt, err = db.PrepareContext(ctx, deleteUserById); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUserById: %w", err)
	}
	if q.deleteUserEmailVerificationCodeByUserIdStmt, err = db.PrepareContext(ctx, deleteUserEmailVerificationCodeByUserId); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUserEmailVerificationCodeByUserId: %w", err)
	}
	if q.getLastCreatedUserEmailVerificationCodeByUserIdStmt, err = db.PrepareContext(ctx, getLastCreatedUserEmailVerificationCodeByUserId); err != nil {
		return nil, fmt.Errorf("error preparing query GetLastCreatedUserEmailVerificationCodeByUserId: %w", err)
	}
	if q.getProductByIdStmt, err = db.PrepareContext(ctx, getProductById); err != nil {
		return nil, fmt.Errorf("error preparing query GetProductById: %w", err)
	}
	if q.getUserAuthByUserIdStmt, err = db.PrepareContext(ctx, getUserAuthByUserId); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserAuthByUserId: %w", err)
	}
	if q.getUserByEmailStmt, err = db.PrepareContext(ctx, getUserByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByEmail: %w", err)
	}
	if q.getUserByIdStmt, err = db.PrepareContext(ctx, getUserById); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserById: %w", err)
	}
	if q.getUserEmailVerificationCodeByEmailAndVerificationCodeStmt, err = db.PrepareContext(ctx, getUserEmailVerificationCodeByEmailAndVerificationCode); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserEmailVerificationCodeByEmailAndVerificationCode: %w", err)
	}
	if q.listTheRecommendedProductsStmt, err = db.PrepareContext(ctx, listTheRecommendedProducts); err != nil {
		return nil, fmt.Errorf("error preparing query ListTheRecommendedProducts: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createProductStmt != nil {
		if cerr := q.createProductStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createProductStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.createUserAuthOnDuplicateUpdateTokenAndExpiredAtStmt != nil {
		if cerr := q.createUserAuthOnDuplicateUpdateTokenAndExpiredAtStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserAuthOnDuplicateUpdateTokenAndExpiredAtStmt: %w", cerr)
		}
	}
	if q.createUserEmailVerificationCodeStmt != nil {
		if cerr := q.createUserEmailVerificationCodeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserEmailVerificationCodeStmt: %w", cerr)
		}
	}
	if q.decreaseUserEmailVerificationCodeMaxTryByIdStmt != nil {
		if cerr := q.decreaseUserEmailVerificationCodeMaxTryByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing decreaseUserEmailVerificationCodeMaxTryByIdStmt: %w", cerr)
		}
	}
	if q.deleteUserAuthByUserIdStmt != nil {
		if cerr := q.deleteUserAuthByUserIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserAuthByUserIdStmt: %w", cerr)
		}
	}
	if q.deleteUserByIdStmt != nil {
		if cerr := q.deleteUserByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserByIdStmt: %w", cerr)
		}
	}
	if q.deleteUserEmailVerificationCodeByUserIdStmt != nil {
		if cerr := q.deleteUserEmailVerificationCodeByUserIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserEmailVerificationCodeByUserIdStmt: %w", cerr)
		}
	}
	if q.getLastCreatedUserEmailVerificationCodeByUserIdStmt != nil {
		if cerr := q.getLastCreatedUserEmailVerificationCodeByUserIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getLastCreatedUserEmailVerificationCodeByUserIdStmt: %w", cerr)
		}
	}
	if q.getProductByIdStmt != nil {
		if cerr := q.getProductByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getProductByIdStmt: %w", cerr)
		}
	}
	if q.getUserAuthByUserIdStmt != nil {
		if cerr := q.getUserAuthByUserIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserAuthByUserIdStmt: %w", cerr)
		}
	}
	if q.getUserByEmailStmt != nil {
		if cerr := q.getUserByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByEmailStmt: %w", cerr)
		}
	}
	if q.getUserByIdStmt != nil {
		if cerr := q.getUserByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByIdStmt: %w", cerr)
		}
	}
	if q.getUserEmailVerificationCodeByEmailAndVerificationCodeStmt != nil {
		if cerr := q.getUserEmailVerificationCodeByEmailAndVerificationCodeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserEmailVerificationCodeByEmailAndVerificationCodeStmt: %w", cerr)
		}
	}
	if q.listTheRecommendedProductsStmt != nil {
		if cerr := q.listTheRecommendedProductsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listTheRecommendedProductsStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                                         DBTX
	tx                                                         *sql.Tx
	createProductStmt                                          *sql.Stmt
	createUserStmt                                             *sql.Stmt
	createUserAuthOnDuplicateUpdateTokenAndExpiredAtStmt       *sql.Stmt
	createUserEmailVerificationCodeStmt                        *sql.Stmt
	decreaseUserEmailVerificationCodeMaxTryByIdStmt            *sql.Stmt
	deleteUserAuthByUserIdStmt                                 *sql.Stmt
	deleteUserByIdStmt                                         *sql.Stmt
	deleteUserEmailVerificationCodeByUserIdStmt                *sql.Stmt
	getLastCreatedUserEmailVerificationCodeByUserIdStmt        *sql.Stmt
	getProductByIdStmt                                         *sql.Stmt
	getUserAuthByUserIdStmt                                    *sql.Stmt
	getUserByEmailStmt                                         *sql.Stmt
	getUserByIdStmt                                            *sql.Stmt
	getUserEmailVerificationCodeByEmailAndVerificationCodeStmt *sql.Stmt
	listTheRecommendedProductsStmt                             *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                tx,
		tx:                tx,
		createProductStmt: q.createProductStmt,
		createUserStmt:    q.createUserStmt,
		createUserAuthOnDuplicateUpdateTokenAndExpiredAtStmt:       q.createUserAuthOnDuplicateUpdateTokenAndExpiredAtStmt,
		createUserEmailVerificationCodeStmt:                        q.createUserEmailVerificationCodeStmt,
		decreaseUserEmailVerificationCodeMaxTryByIdStmt:            q.decreaseUserEmailVerificationCodeMaxTryByIdStmt,
		deleteUserAuthByUserIdStmt:                                 q.deleteUserAuthByUserIdStmt,
		deleteUserByIdStmt:                                         q.deleteUserByIdStmt,
		deleteUserEmailVerificationCodeByUserIdStmt:                q.deleteUserEmailVerificationCodeByUserIdStmt,
		getLastCreatedUserEmailVerificationCodeByUserIdStmt:        q.getLastCreatedUserEmailVerificationCodeByUserIdStmt,
		getProductByIdStmt:                                         q.getProductByIdStmt,
		getUserAuthByUserIdStmt:                                    q.getUserAuthByUserIdStmt,
		getUserByEmailStmt:                                         q.getUserByEmailStmt,
		getUserByIdStmt:                                            q.getUserByIdStmt,
		getUserEmailVerificationCodeByEmailAndVerificationCodeStmt: q.getUserEmailVerificationCodeByEmailAndVerificationCodeStmt,
		listTheRecommendedProductsStmt:                             q.listTheRecommendedProductsStmt,
	}
}
