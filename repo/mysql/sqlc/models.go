// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0

package sqlc

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"
)

type ProductsStatus string

const (
	ProductsStatusOn  ProductsStatus = "on"
	ProductsStatusOff ProductsStatus = "off"
)

func (e *ProductsStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ProductsStatus(s)
	case string:
		*e = ProductsStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for ProductsStatus: %T", src)
	}
	return nil
}

type NullProductsStatus struct {
	ProductsStatus ProductsStatus `json:"products_status"`
	Valid          bool           `json:"valid"` // Valid is true if ProductsStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullProductsStatus) Scan(value interface{}) error {
	if value == nil {
		ns.ProductsStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ProductsStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullProductsStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ProductsStatus), nil
}

type Product struct {
	ID []byte `json:"id"`
	// created time
	CreatedAt time.Time `json:"created_at"`
	// updated time
	UpdatedAt time.Time `json:"updated_at"`
	// product name
	Name string `json:"name"`
	// product description
	Description string `json:"description"`
	// product price
	Price uint32 `json:"price"`
	// product sorting
	OrderBy int32 `json:"order_by"`
	// the product is recommendation
	IsRecommendation bool `json:"is_recommendation"`
	// total quantity of the product
	TotalQuantity uint32 `json:"total_quantity"`
	// sold quantity of the product
	SoldQuantity uint32 `json:"sold_quantity"`
	//
	// on: the product can be sold
	// off: the product was discontinued
	//
	Status ProductsStatus `json:"status"`
}

type User struct {
	ID []byte `json:"id"`
	// created time
	CreatedAt time.Time `json:"created_at"`
	// updated time
	UpdatedAt time.Time `json:"updated_at"`
	// user name
	Name string `json:"name"`
	// user email
	Email string `json:"email"`
	// email verified time
	EmailVerifiedAt sql.NullTime `json:"email_verified_at"`
	// user password
	Password string `json:"password"`
}

type UserAuth struct {
	ID []byte `json:"id"`
	// created time
	CreatedAt time.Time `json:"created_at"`
	// updated time
	UpdatedAt time.Time `json:"updated_at"`
	// user id
	UserID []byte `json:"user_id"`
	// auth token
	Token string `json:"token"`
	// token expired time
	ExpiredAt time.Time `json:"expired_at"`
}

type UserEmailVerificationCode struct {
	ID []byte `json:"id"`
	// created time
	CreatedAt time.Time `json:"created_at"`
	// updated time
	UpdatedAt time.Time `json:"updated_at"`
	// user id
	UserID []byte `json:"user_id"`
	// user email
	Email string `json:"email"`
	// email verification code
	VerificationCode string `json:"verification_code"`
	// maximum number of verification attempts
	MaxTry uint32 `json:"max_try"`
	// verification code expired time
	ExpiredAt time.Time `json:"expired_at"`
}
