// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: user_auth.sql

package sqlc

import (
	"context"
	"time"
)

const createUserAuth = `-- name: CreateUserAuth :exec
INSERT INTO user_auth (
    user_id,
    token,
    expired_at 
) VALUES (
    ?,
    ?,
    ?
)
`

type CreateUserAuthParams struct {
	UserID    uint32    `json:"user_id"`
	Token     string    `json:"token"`
	ExpiredAt time.Time `json:"expired_at"`
}

func (q *Queries) CreateUserAuth(ctx context.Context, arg CreateUserAuthParams) error {
	_, err := q.exec(ctx, q.createUserAuthStmt, createUserAuth, arg.UserID, arg.Token, arg.ExpiredAt)
	return err
}

const deleteUserAuthByUserId = `-- name: DeleteUserAuthByUserId :exec
DELETE FROM
   user_auth 
WHERE
    user_id = ?
`

func (q *Queries) DeleteUserAuthByUserId(ctx context.Context, userID uint32) error {
	_, err := q.exec(ctx, q.deleteUserAuthByUserIdStmt, deleteUserAuthByUserId, userID)
	return err
}

const getUserAuthByUserId = `-- name: GetUserAuthByUserId :one
SELECT
    id, created_at, updated_at, user_id, token, expired_at
FROM
    user_auth
WHERE
    user_id = ?
`

func (q *Queries) GetUserAuthByUserId(ctx context.Context, userID uint32) (UserAuth, error) {
	row := q.queryRow(ctx, q.getUserAuthByUserIdStmt, getUserAuthByUserId, userID)
	var i UserAuth
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.Token,
		&i.ExpiredAt,
	)
	return i, err
}

const updateUserAuthById = `-- name: UpdateUserAuthById :exec
UPDATE
    user_auth
SET
    token = ?,
    expired_at = ?,
    updated_at = NOW()
WHERE
    id = ?
`

type UpdateUserAuthByIdParams struct {
	Token     string    `json:"token"`
	ExpiredAt time.Time `json:"expired_at"`
	ID        uint32    `json:"id"`
}

func (q *Queries) UpdateUserAuthById(ctx context.Context, arg UpdateUserAuthByIdParams) error {
	_, err := q.exec(ctx, q.updateUserAuthByIdStmt, updateUserAuthById, arg.Token, arg.ExpiredAt, arg.ID)
	return err
}
